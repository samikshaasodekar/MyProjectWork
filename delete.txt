package com.genc.hms; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; @SpringBootApplication public class SpringDataJpaApplication{ public static void main(String[] args) { SpringApplication.run(SpringDataJpaApplication.class, args); } } package com.genc.hms.controller; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.http.ResponseEntity; import org.springframework.web.bind.annotation.DeleteMapping; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.PutMapping; import org.springframework.web.bind.annotation.RequestBody; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import com.genc.hms.entity.Doctor; import com.genc.hms.service.DoctorService; @RestController @RequestMapping("/api/doctors") public class DoctorController { @Autowired DoctorService doctorService; @PostMapping public Doctor addDoctor(@RequestBody Doctor doctor) { return doctorService.addDoctor(doctor); } @GetMapping public List<Doctor> getAllDoctors(){ return doctorService.getAllDoctor(); } @GetMapping("/{id}") public ResponseEntity<Doctor> getDoctorById(@PathVariable int id){ Doctor doctor = doctorService.getDoctorById(id); if(doctor != null) { return ResponseEntity.ok(doctor); }else { return ResponseEntity.notFound().build(); } } @PutMapping("/{id}") public ResponseEntity<Doctor> updateDoctor(@PathVariable int id, @RequestBody Doctor doctorDetails){ Doctor updated = doctorService.updateDoctor(id, doctorDetails); if(updated != null) { return ResponseEntity.ok(updated); }else { return ResponseEntity.notFound().build(); } } @DeleteMapping("/{id}") public ResponseEntity<String> deleteDoctor(@PathVariable int id){ boolean deleted = doctorService.deleteDoctor(id); if(deleted) { return ResponseEntity.ok("Doctor deleted successfully"); }else { return ResponseEntity.notFound().build(); } } } package com.genc.hms.dto; import jakarta.validation.constraints.NotBlank; import jakarta.validation.constraints.Pattern; import jakarta.validation.constraints.Size; public class DoctorDto { private int doctorId; @NotBlank(message="Name is required") @Size(min=2, max=30, message="Name must be 2-30 characters") private String name; @NotBlank(message="Specialization is required") @Size(min=2, max=30) private String specialization; @NotBlank(message="Contact Number is required") @Pattern(regexp="\\d{10}", message="Contact must be 10 digits") private String contactNumber; @NotBlank(message="Availability schedule is required") private String availabilitySchedule; public int getDoctorId() { return doctorId; } public void setDoctorId(int doctorId) { this.doctorId = doctorId; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSpecialization() { return specialization; } public void setSpecialization(String specialization) { this.specialization = specialization; } public String getContactNumber() { return contactNumber; } public void setContactNumber(String contactNumber) { this.contactNumber = contactNumber; } public String getAvailabilitySchedule() { return availabilitySchedule; } public void setAvailabilitySchedule(String availabilitySchedule) { this.availabilitySchedule = availabilitySchedule; } } package com.genc.hms.entity; import jakarta.persistence.Column; import jakarta.persistence.Entity; import jakarta.persistence.GeneratedValue; import jakarta.persistence.GenerationType; import jakarta.persistence.Id; @Entity public class Doctor { @Id @GeneratedValue(strategy=GenerationType.IDENTITY) private int doctorId; @Column(nullable=false) private String name; @Column(nullable=false) private String specialization; @Column(nullable=false, length=10) private String contactNumber; @Column(nullable=false) private String availabilitySchedule; public Doctor() {} public Doctor(String name, String specialization, String contactNumber, String availabilitySchedule) { super(); this.name = name; this.specialization = specialization; this.contactNumber = contactNumber; this.availabilitySchedule = availabilitySchedule; } public int getDoctorId() { return doctorId; } public void setDoctorId(int doctorId) { this.doctorId = doctorId; } public String getName() { return name; } public void setName(String name) { this.name = name; } public String getSpecialization() { return specialization; } public void setSpecialization(String specialization) { this.specialization = specialization; } public String getContactNumber() { return contactNumber; } public void setContactNumber(String contactNumber) { this.contactNumber = contactNumber; } public String getAvailabilitySchedule() { return availabilitySchedule; } public void setAvailabilitySchedule(String availabilitySchedule) { this.availabilitySchedule = availabilitySchedule; } }package com.genc.hms.repository; import org.springframework.data.jpa.repository.JpaRepository; import org.springframework.stereotype.Repository; import com.genc.hms.entity.Doctor; @Repository public interface DoctorRepository extends JpaRepository<Doctor, Integer>{ } package com.genc.hms.service; import java.util.List; import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Service; import com.genc.hms.entity.Doctor; import com.genc.hms.repository.DoctorRepository; @Service public class DoctorService { @Autowired DoctorRepository doctorRepository; public Doctor addDoctor(Doctor doctor) { return doctorRepository.save(doctor); } public List<Doctor> getAllDoctor(){ return doctorRepository.findAll(); } public Doctor getDoctorById(int id) { return doctorRepository.findById(id).orElse(null); } public Doctor updateDoctor(int id, Doctor doctorDetails) { Doctor doctor = doctorRepository.findById(id).orElse(null); if(doctor != null) { doctor.setName(doctorDetails.getName()); doctor.setSpecialization(doctorDetails.getSpecialization()); doctor.setContactNumber(doctorDetails.getContactNumber()); doctor.setAvailabilitySchedule(doctorDetails.getAvailabilitySchedule()); return doctorRepository.save(doctor); } return null; } public boolean deleteDoctor(int id) { if(doctorRepository.existsById(id)) { doctorRepository.deleteById(id); return true; } return false; } } spring.application.name=SpringDataJPA2 spring.datasource.url=jdbc:mysql://localhost:3306/doctorREST?createDatabaseIfNotExist=true spring.datasource.username=root spring.datasource.password=root spring.jpa.hibernate.ddl-auto=update spring.jpa.show-sql=true spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect server.port=8083<?xml version="1.0" encoding="UTF-8"?> <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd"> <modelVersion>4.0.0</modelVersion> <parent> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-parent</artifactId> <!-- ⚠️ Use the latest stable version available in Maven Central --> <version>3.3.5</version> <relativePath/> <!-- lookup parent from repository --> </parent> <groupId>com.example</groupId> <artifactId>SpringDataJPA</artifactId> <version>0.0.1-SNAPSHOT</version> <name>SpringDataJPA</name> <description>Demo project for Spring Data JPA</description> <properties> <java.version>17</java.version> </properties> <dependencies> <!-- Spring Web (REST APIs, MVC) --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-web</artifactId> </dependency> <!-- Spring Data JPA --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-data-jpa</artifactId> </dependency> <!-- Thymeleaf template engine --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-thymeleaf</artifactId> </dependency> <!-- MySQL Driver --> <dependency> <groupId>com.mysql</groupId> <artifactId>mysql-connector-j</artifactId> <scope>runtime</scope> </dependency> <!-- DevTools (development only) --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-devtools</artifactId> <optional>true</optional> </dependency> <!-- Testing --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-test</artifactId> <scope>test</scope> </dependency> <!-- Bean Validation (Jakarta Validation API + Hibernate Validator) --> <dependency> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-starter-validation</artifactId> </dependency> </dependencies> <build> <plugins> <plugin> <groupId>org.springframework.boot</groupId> <artifactId>spring-boot-maven-plugin</artifactId> </plugin> </plugins> </build> </project> ...this is my project why its not running